Step 1: Install Java and Extensions in VS Code
Ensure Java Is Installed:

Confirm Java and javac are installed by running:
bash
Copy code
java --version
javac --version
If not, follow the setup steps to install the JDK.
Install the Java Extension Pack:

Open VS Code.
Go to the Extensions view: Ctrl + Shift + X (Windows/Linux) or Cmd + Shift + X (Mac).
Search for Java Extension Pack.
Click Install.
Step 2: Set Up Your Project in VS Code
Create a Project Folder:

Create a folder for your project, e.g., MyJavaProject.
Open the Folder in VS Code:

Go to File > Open Folder and select your project folder.
Create a File for Your Program:

Inside the project folder, create a new folder (e.g., src) for your Java files.
Inside src, create a file named Main.java.
Step 3: Write a Simple Java Program
In Main.java, write the following example program:

java
Copy code
public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
Step 4: Configure the Java Runtime
Set Up Java Configuration:

Press Ctrl + Shift + P (or Cmd + Shift + P on Mac) to open the Command Palette.
Type Java: Configure Java Runtime and select it.
Ensure the correct JDK is selected. If not, set the JDK path manually.
Set the Compiler Path (if needed):

Go to Settings in VS Code.
Search for Java Home.
Set the path to your JDK installation (e.g., /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home).
Step 5: Compile and Run Your Program
Run the Program Using the Play Button:

Open Main.java in the editor.
Click the green Run button in the top right corner. This will compile and run the program.
Compile and Run from the Terminal (Optional):

Open the terminal in VS Code (View > Terminal or Ctrl + `).
Navigate to the folder

2/2

You said:
can you provide commands useful for exam in java and python for running files in vscode 
ChatGPT said:
ChatGPT
Essential Commands for Running Java and Python Files in VS Code (Exam Use)
Below are useful commands and tips for working with Java and Python files in VS Code, focusing on tasks typically required in exams.

1. Java
Compiling and Running Java Files
Compile a Java File
bash
Copy code
javac filename.java
Example:
bash
Copy code
javac Main.java
This generates a Main.class file in the same directory.
Run a Compiled Java File
bash
Copy code
java classname
Example:
bash
Copy code
java Main
Running Java in VS Code
Using the Java Extension Pack
Open your Java file (e.g., Main.java).
Click the green Run button in the top right corner of the editor.
Alternatively, use the Command Palette (Ctrl + Shift + P or Cmd + Shift + P) and type:
bash
Copy code
Java: Run
Run from Terminal
If you have the .java file open in VS Code:

Open the terminal (View > Terminal).
Navigate to the directory of your file:
bash
Copy code
cd path/to/your/project
Compile and run:
bash
Copy code
javac Main.java
java Main
Key Java Commands
Check Java Version:
bash
Copy code
java --version
javac --version
Set Classpath (if your project has dependencies):
bash
Copy code
java -cp .:path/to/dependency.jar classname
Clean Up Compiled Files:
bash
Copy code
rm *.class
2. Python
Running Python Files
Run a Python File
bash
Copy code
python filename.py
Example:
bash
Copy code
python script.py
Run in VS Code
Open the Python file (e.g., script.py).
Click the green Run button in the top right corner.
Alternatively, use the Command Palette (Ctrl + Shift + P or Cmd + Shift + P) and type:
bash
Copy code
Python: Run Python File
Python Virtual Environment
Create a Virtual Environment
bash
Copy code
python -m venv venv
Activate the Virtual Environment
Windows:
bash
Copy code
venv\Scripts\activate
Mac/Linux:
bash
Copy code
source venv/bin/activate
Deactivate the Virtual Environment
bash
Copy code
deactivate
Key Python Commands
Install Required Libraries:

bash
Copy code
pip install library_name
Example:
bash
Copy code
pip install pandas matplotlib
List Installed Libraries:

bash
Copy code
pip list
Run Python in Interactive Mode:

bash
Copy code
python
Lint Code (Check for Errors):

bash
Copy code
pylint filename.py
3. General Commands in VS Code
Open Terminal in VS Code
bash
Copy code
Ctrl + `  (Windows/Linux)
Cmd + `  (Mac)
Run a File in the Integrated Terminal
Right-click the file in the Explorer panel.
Select Run Python File in Terminal or Run Java File in Terminal.
Run Code Using Code Runner Extension
If you’ve installed the Code Runner extension:

Click the play button in the top right or press Ctrl + Alt + N (Windows/Linux) or Cmd + Option + N (Mac).
Tips for Exam
Test Before Running:

For Java, always compile before running.
For Python, check for syntax errors with pylint.
Manage Output:

Use System.out.println() in Java or print() in Python to debug.
Save Frequently:

Ensure files are saved before running to avoid executing outdated code.
Set Up a Clean Environment:

Use virtual environments for Python to avoid dependency conflicts.
Navigate File Paths:

Use cd to navigate to your project folder in the terminal.


Skip to main content
Moodle
Home
Dashboard
My courses
MyGrades (BETA)
My Media
Accessibility Tool
Help
If you have been ill or had other adverse circumstances which you believe have affected any of your exams or other assessments, this can be considered through our regulations on 'Good Cause'. Good Cause claims are submitted via MyCampus and further information on the process is explained in our 'Key FAQs for students'.

×
Dashboard
My courses
College of Science and Engineering
Schools
Computing Science
Welcome to the School of Computing Science
MSc(IT+) and MSc(CS+)
Compulsory courses (CS+ only)
COMPSCI4084 Programming and Systems Development H - 2024-25
Final Lab Exam
Final Lab Exam - Wednesday 11th December - (Python and Java)
COMPSCI4084 Programming and Systems Development H - 2024-25
Time left 2:11:23
Question 2
Not yet answered
Marked out of 40.00
Flag question
Question text
Part 2: Java question

You are going to make a system that manages a pet care service: that is, a service that looks after animals when the owners may be away. Each animal is housed in its own enclosure at the service.

The tasks will get harder as you progress, and build on each other, so try to ensure that you complete each stage before moving on. Be sure to read through the entire specification before you begin to get a sense of all the features that might be needed.

In each task, marks will be awarded for clean code and sensible object-oriented design choices as well as functionality.

Java Task 1: Representing an animal (10 marks)

Download this Java starter package.

We have provided initial versions of an enumerated type AnimalSize and the skeleton of the Animal class that you should use for this task, which are both in the petcare package. You must use these classes: do not change the name of the classes or the package.

For our purposes, an animal has the following properties:

-        Name: Each animal has a name which must be at least 3 characters long.

-        Size: An animal can be one of three sizes: small, medium, or large.

-        Comfortable temperature: Animals need to be kept within a specific temperature range to be comfortable. Each animal will have a range they must stay within, which must be expressed as a lower and upper bounding integer, both in the range 0 to 50 – an animal is comfortable in an enclosure as long as the temperature is between those two values. 

 

Task 1a [4 marks]

Write some code to represent an animal so it can be stored in the system. You should use the provided Animal class as the starting point for this class, but the specific details of the implementation are up to you. Make sure to include a constructor that sets all properties.

 

Task 1b [2 marks]

Add getter and setter methods for all the values and override the toString() method and equals()/hashCode() methods. The equals method should return true when two animals are the same size and have the same name.

 

Task 1c [4 marks]

Ensure that all the values that are stored are valid, following the specification above. If someone tries to create or update an animal with invalid values, then an IllegalArgumentException should be thrown, and the change should not take effect.

 
 

Java Task 2: Enclosures and checks (15 marks)

An enclosure is a cage or pen that the pet care service maintains to keep one of the animals they are looking after in. Enclosures have:

-        Size: Each specific enclosure is rated to look after animals up to the size of small, medium or large.

-        Temperature: Each enclosure has a specific temperature that it is maintained at.

-        Running costs: Each enclosure costs a certain amount to run each day, which can be expressed as an integer.

-        Current occupant: If there is an animal in the enclosure, they should be stored, otherwise the value of occupant should be null.

 

Task 2a [4 marks]

Create a class called Enclosure that stores this information. The class should have a constructor that takes in a size, temperature, and running costs when it is created and set the occupant to null. The class should have getter methods for all the variables but no setters.

 

Task 2b [5 marks]

Write a method with the signature:
              

public boolean checkCompatibility(Animal animal)

When passed an animal, the method checks whether the enclosure can take the animal and returns true if it can. For an animal to be compatible with an enclosure, the animal must be of the same size or smaller than the size an enclosure is rated for, and the enclosure’s temperature should fall within the animal’s comfort range.

Task 2c [6 marks]

Write a pair of methods with the signatures:

 

public void addAnimal(Animal animal)

     public void removeAnimal()

When called, these methods should, respectively, add an animal to the Enclosure if it is compatible and does not already have an occupant, and remove the animal currently in the enclosure. If the animal cannot be added, then throw an IllegalArgumentExcepion. If removeAnimal is called on an empty enclosure, nothing should happen.

 

 
 

Java task 3: The pet care service (15 marks)

The pet care service manages a collection of enclosures, and animals are allocated to enclosures as they arrive. Additional enclosures can be added to the service as needed.

Task 3a [3 mark]

Write a class called PetService to represent the pet care service, which stores a single piece of information: the collection of enclosures that it manages, which should be initially empty.

 

Task 3b [4 marks]

Add methods to the PetService class to maintain and print the enclosures that it manages.

Add a method to the class with the following signature:

              

public void addEnclosure(Enclosure enclosure)

When called, this method should add the given enclosure to the enclosures that the pet service has.

Add a second method with the signature:

public void printAllEnclosures() 

This should print out the details of all the enclosures that the service maintains.

Task 3c [4 marks]

In this task you will handle adding an animal into the pet service’s care.

Add a method with the signature:

 

public boolean allocateAnimal(Animal animal)

When called, this method should find the best enclosure to allocate an animal based on the following criteria:

-        The enclosure must meet all the requirements for the animal (size, temperature).

-        The enclosure cannot have another animal staying within it.

-        If more than one enclosure meets the requirements, the animal should be allocated to the cheapest one (i.e., the one with the lowest running cost), and the method should return true.

-        If no appropriate enclosure is available, then no changes should be made to the pet service and the method should return false.

 

Task 3d [4 marks]

Finally, add a method with the signature:

 

public void removeAnimal(Animal animal)

When called, this method should search for a matching animal within the enclosures of the pet service. If a matching animal exists, it should be removed from its enclosure. If the animal does not exist in the system, then the method should throw an IllegalArgumentException.

Submission

Upload all of your Java files below: Animal.java, AnimalSize.java, Enclosure.java, and PetService.java.

Answer files Question 2
Maximum size for new files: 100 MB
Files
You can drag and drop files here to add them.
Accepted file types

Text file .java
University WebsiteMoodle Mobile AppAccessibilityPrivacy and CookiesHelp with this page
The University of Glasgow is a registered Scottish charity: Registration Number SC004401



remove all comments, change variable name
--------------------------------------------

import pandas as pd
import matplotlib.pyplot as plt
import sqlite3
import torch
import torch.nn as nn
import torch.optim as optim

# Task 1a: Data Loading and Preprocessing
# Load the CSV file
sales_data = pd.read_csv('sales_data.csv')

# Data Cleaning
# 1. Fill missing values: Fill missing product names with 'Unknown', prices with median price, and totals with calculated values
sales_data['Product'].fillna('Unknown', inplace=True)
sales_data['Price'].fillna(sales_data['Price'].median(), inplace=True)
sales_data['Total'].fillna(sales_data['Quantity'] * sales_data['Price'], inplace=True)

# 2. Convert Date column to datetime object
sales_data['Date'] = pd.to_datetime(sales_data['Date'], format='%d/%m/%Y')

# 3. Ensure Total column is correct
sales_data['Total'] = sales_data['Quantity'] * sales_data['Price']

# Verify data after cleaning
print("Data after cleaning:\n", sales_data.head())

# Task 1b: Data Visualization
# 1. Product Sales Distribution
product_sales = sales_data.groupby('Product')['Quantity'].sum()
product_sales.plot(kind='bar', title='Product Sales Distribtion', xlabel='Product', ylabel='Total Quantity Sold ')
plt.show()

# 2. Sales Over Time
sales_data['Month'] = sales_data['Date'].dt.to_period('M')
monthly_sales = sales_data.groupby('Month')['Total'].sum()
monthly_sales.plot(kind='line', title='Total Sales Over Time', xlabel='Month', ylabel='Total Sales')
plt.show()

# Task 2a: Database Creation and Data Insertion
# Create SQLite database and table
conn = sqlite3.connect('SalesDB.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS Sales (Date TEXT,Product TEXT, Quantity INTEGER,Price REAL,Total REAL)''')

# Insert cleaned data into the Sales table
sales_data.to_sql('Sales', conn, if_exists='replace', index=False)

# Task 2b: Querying the Database
# 1. Total Sales Calculation for 2023
query_total_sales = ''' SELECT SUM(Total) AS TotalSales2023 FROM Sales WHERE Date BETWEEN '2023-01-01' AND '2023-12-31' '''
cursor.execute(query_total_sales)
print("Total Sales in 2023:", cursor.fetchone()[0])

# 2. Product Sales Summary
query_product_sales = ''' SELECT Product, SUM(Quantity) AS TotalQuantity FROM Sales WHERE Date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY Product ORDER BY TotalQuantity DESC '''
product_sales_summary = cursor.execute(query_product_sales).fetchall()
print("Product Sales Summary in 2023:\n", product_sales_summary)

# Task 3: Neural Network Implementation
# Task 3a: Model Initialization
class SimpleNN(nn.Module):
    def __init__(self):
        super(SimpleNN, self).__init__()
        self.fc1 = nn.Linear(10, 5)
        self.relu1 = nn.ReLU()
        self.fc2 = nn.Linear(5, 3)
        self.relu2 = nn.ReLU()
        self.fc3 = nn.Linear(3, 1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = self.relu1(self.fc1(x))
        x = self.relu2(self.fc2(x))
        x = self.sigmoid(self.fc3(x))
        return x

model = SimpleNN()
criterion = nn.MSELoss()
optimizer = optim.SGD(model.parameters(), lr=0.01)

# Task 3b: Data Generation
input_data = torch.randn(100, 10)
target_data = torch.randn(100, 1)

# Task 3c: Training the Network
losses = []
for epoch in range(20):
    optimizer.zero_grad()
    outputs = model(input_data)
    loss = criterion(outputs, target_data)
    loss.backward()
    optimizer.step()
    losses.append(loss.item())
    print(f"Epoch {epoch+1}, Loss: {loss.item()}")

# Task 3d: Loss Visualization
plt.plot(range(1, 21), losses, marker='o')
plt.title('Training Loss Over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.show()

# Close the database connection
conn.close()

